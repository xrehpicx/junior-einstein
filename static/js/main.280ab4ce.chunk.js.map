{"version":3,"sources":["assets/atria_logo.png","assets/atom.svg","assets/yesist.png","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["App","useState","intro","setIntro","useEffect","setTimeout","className","AnimateSharedLayout","type","motion","div","img","style","width","marginBottom","layoutId","src","atrialogo","alt","span","initial","fontSize","animate","fontWeight","opacity","x","marginLeft","yesist","target","rel","href","marginTop","atomlogo","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sPAAe,G,MAAA,IAA0B,wCCA1B,MAA0B,iCCA1B,MAA0B,mCC6F1BA,MAvFf,WAAgB,IAAD,EACaC,oBAAS,GADtB,mBACNC,EADM,KACCC,EADD,KASb,OANAC,qBAAU,WACRC,YAAW,WACTF,GAAS,KACR,QAIH,sBAAKG,UAAU,MAAf,UACE,cAACC,EAAA,EAAD,CAAqBC,KAAK,SAA1B,SACGN,EACC,eAACO,EAAA,EAAOC,IAAR,CAAYJ,UAAU,QAAtB,UACE,cAACG,EAAA,EAAOE,IAAR,CACEC,MAAO,CAAEC,MAAO,QAASC,aAAc,QACvCC,SAAS,YACTC,IAAKC,EACLC,IAAI,KAEN,cAACT,EAAA,EAAOU,KAAR,CACEC,QAAS,CAAEC,SAAU,QACrBC,QAAS,CAAED,SAAU,OAAQE,WAAY,KACzCR,SAAS,WACTT,UAAU,YAJZ,0CAUF,eAACG,EAAA,EAAOC,IAAR,CACEU,QAAS,CAAEI,QAAS,EAAGC,EAAG,KAC1BH,QAAS,CAAEE,QAAS,GACpBlB,UAAU,OAHZ,UAKE,eAACG,EAAA,EAAOC,IAAR,CAAYJ,UAAU,QAAQM,MAAO,CAAEE,aAAc,QAArD,UACE,cAACL,EAAA,EAAOE,IAAR,CACEC,MAAO,CAAEC,MAAO,SAChBE,SAAS,YACTC,IAAKC,EACLC,IAAI,KAEN,cAACT,EAAA,EAAOE,IAAR,CACEC,MAAO,CAAEC,MAAO,QAASa,WAAY,IACrCN,QAAS,CAAEI,QAAS,GACpBF,QAAS,CAAEE,QAAS,GACpBR,IAAKW,EACLT,IAAI,QAIR,cAACT,EAAA,EAAOU,KAAR,CACEG,QAAS,CAAED,SAAU,SAAUE,WAAY,KAC3CR,SAAS,WACTT,UAAU,YAHZ,uCAOA,mBAAGA,UAAU,cAAb,4CACA,mBAAGA,UAAU,aAAb,6BACA,mBACEsB,OAAO,SACPC,IAAI,aACJvB,UAAU,kBACVwB,KAAK,kHAJP,0BAQA,mBAAGlB,MAAO,CAAEmB,UAAW,GAAIR,WAAY,QAAvC,oCAMJrB,GACA,cAACO,EAAA,EAAOE,IAAR,CACEW,QAAS,CAAEE,QAAS,EAAGC,EAAG,OAC1BL,QAAS,CAAEI,QAAS,EAAGC,EAAG,QAC1BnB,UAAU,YACVU,IAAKgB,EACLd,IAAI,SC1EMe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCfnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YEpH5BtB,M","file":"static/js/main.280ab4ce.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/atria_logo.20e58d5b.png\";","export default __webpack_public_path__ + \"static/media/atom.c728831b.svg\";","export default __webpack_public_path__ + \"static/media/yesist.3057c074.png\";","import { AnimateSharedLayout, motion } from \"framer-motion\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./css/main.css\";\nimport atrialogo from \"./assets/atria_logo.png\";\nimport atomlogo from \"./assets/atom.svg\";\nimport yesist from \"./assets/yesist.png\";\nfunction App() {\n  const [intro, setIntro] = useState(true);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIntro(false);\n    }, 2000);\n  });\n\n  return (\n    <div className=\"app\">\n      <AnimateSharedLayout type=\"switch\">\n        {intro ? (\n          <motion.div className=\"intro\">\n            <motion.img\n              style={{ width: \"100px\", marginBottom: \"10px\" }}\n              layoutId=\"atrialogo\"\n              src={atrialogo}\n              alt=\"\"\n            />\n            <motion.span\n              initial={{ fontSize: \"1rem\" }}\n              animate={{ fontSize: \"2rem\", fontWeight: 600 }}\n              layoutId=\"subtitle\"\n              className=\"subtitile\"\n            >\n              IEEE Atria Student Branch\n            </motion.span>\n          </motion.div>\n        ) : (\n          <motion.div\n            initial={{ opacity: 0, x: 200 }}\n            animate={{ opacity: 1 }}\n            className=\"main\"\n          >\n            <motion.div className=\"logos\" style={{ marginBottom: \"10px\" }}>\n              <motion.img\n                style={{ width: \"100px\" }}\n                layoutId=\"atrialogo\"\n                src={atrialogo}\n                alt=\"\"\n              />\n              <motion.img\n                style={{ width: \"200px\", marginLeft: 20 }}\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                src={yesist}\n                alt=\"\"\n              />\n            </motion.div>\n\n            <motion.span\n              animate={{ fontSize: \"1.2rem\", fontWeight: 600 }}\n              layoutId=\"subtitle\"\n              className=\"subtitile\"\n            >\n              IEEE Atria Student Branch\n            </motion.span>\n            <p className=\"small-title\">Internationl Project Expo 2021</p>\n            <p className=\"caps-title\">JUNIOR EINSTEIN</p>\n            <a\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              className=\"register-button\"\n              href=\"https://docs.google.com/forms/d/e/1FAIpQLScjSkBUJVz9y4iigQrFQIzHwdtz6fhEU-UTI9pexsBtcmREwg/viewform?usp=sf_link\"\n            >\n              Register Now\n            </a>\n            <p style={{ marginTop: 10, fontWeight: \"bold\" }}>\n              before 20th June\n            </p>\n          </motion.div>\n        )}\n      </AnimateSharedLayout>\n      {!intro && (\n        <motion.img\n          animate={{ opacity: 1, x: \"50%\" }}\n          initial={{ opacity: 0, x: \"100%\" }}\n          className=\"atom-icon\"\n          src={atomlogo}\n          alt=\"\"\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}